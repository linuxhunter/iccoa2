package com.example.iccoa2

import com.example.iccoa2.ble.AuthRandomRequest
import com.example.iccoa2.ble.AuthRequest
import com.example.iccoa2.ble.AuthResponse
import com.example.iccoa2.ble.QueryVehicleStatusRequest
import com.example.iccoa2.ble.RkeFunctionAndAction
import com.example.iccoa2.ble.RkeRequest
import com.example.iccoa2.ble.SubscribeVehicleStatusRequest
import com.example.iccoa2.ble.UnsubscribeVehicleStatusRequest
import com.example.iccoa2.ble.VehicleEntity
import org.junit.Test

import org.junit.Assert.*

@OptIn(ExperimentalUnsignedTypes::class)
class BleAuthUnitTest {
    @Test
    fun serialize_auth_random_request() {
        val serializedRequest = AuthRandomRequest().run {
            this.serialize()
        }
        assertArrayEquals(
            serializedRequest.toByteArray(),
            ubyteArrayOf(
                0x8Bu, 0x00u,
            ).toByteArray()
        )
    }
    @Test
    fun deserialize_auth_random_request() {
        val buffer: UByteArray = ubyteArrayOf(
            0x8Bu, 0x00u,
        )
        AuthRandomRequest().apply {
            this.deserialize(buffer)
        }
    }
    @Test
    fun create_auth_request() {
        val request = AuthRequest().apply {
            this.random = ubyteArrayOf(
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            )
        }
        assertArrayEquals(
            request.random.toByteArray(),
            ubyteArrayOf(
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            ).toByteArray()
        )
    }
    @Test
    fun update_auth_request() {
        val request = AuthRequest().apply {
            this.random = ubyteArrayOf(
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            )
        }

        request.apply {
            this.random = ubyteArrayOf(
                0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu,
            )
        }
        assertArrayEquals(
            request.random.toByteArray(),
            ubyteArrayOf(
                0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu,
            ).toByteArray()
        )
    }
    @Test
    fun serialize_auth_request() {
        val request = AuthRequest().apply {
            this.random = ubyteArrayOf(
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            )
        }
        val serializedRequest = request.serialize()
        assertArrayEquals(
            serializedRequest.toByteArray(),
            ubyteArrayOf(
                0x8Au,
                0x08u,
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            ).toByteArray()
        )
    }
    @Test
    fun deserialize_auth_request() {
        val buffer: UByteArray = ubyteArrayOf(
            0x8Au,
            0x08u,
            0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
        )
        val request = AuthRequest().apply {
            this.deserialize(buffer)
        }
        assertArrayEquals(
            request.random.toByteArray(),
            ubyteArrayOf(
                0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u,
            ).toByteArray()
        )
    }
    @Test
    fun create_auth_response() {
        val response = AuthResponse().apply {
            this.keyId = KeyId().apply {
                this.deviceOemId = 0x0102u
                this.vehicleOemId = 0x0304u
                this.keySerialId = ubyteArrayOf(0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u)
            }
            this.rke = null
            this.subscribe = null
            this.query = null
            this.unsubscribe = null
            this.signature = ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            )
        }
        assertEquals(response.keyId.deviceOemId.toInt(), 0x0102)
        assertEquals(response.keyId.vehicleOemId.toInt(), 0x0304)
        assertArrayEquals(
            response.keyId.keySerialId.toByteArray(),
            ubyteArrayOf(
                0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u
            ).toByteArray()
        )
        assertNull(response.rke)
        assertNull(response.subscribe)
        assertNull(response.query)
        assertNull(response.unsubscribe)
        assertArrayEquals(
            response.signature.toByteArray(),
            ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            ).toByteArray()
        )
    }
    @Test
    fun update_auth_response() {
        val response = AuthResponse().apply {
            this.keyId = KeyId().apply {
                this.deviceOemId = 0x0102u
                this.vehicleOemId = 0x0304u
                this.keySerialId = ubyteArrayOf(0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u)
            }
            this.rke = null
            this.subscribe = null
            this.query = null
            this.unsubscribe = null
            this.signature = ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            )
        }

        response.apply {
            this.keyId = KeyId().apply {
                this.deviceOemId = 0x0201u
                this.vehicleOemId = 0x0403u
                this.keySerialId = ubyteArrayOf(0x10u, 0x0Fu, 0x0Eu, 0x0Du, 0x0Cu, 0x0Bu, 0x0Au, 0x09u, 0x08u, 0x07u, 0x06u, 0x05u)
            }
            this.rke = RkeRequest().apply {
                this.rke = RkeFunctionAndAction.DoorLock
            }
            this.subscribe = SubscribeVehicleStatusRequest().apply {
                this.entity = VehicleEntity.DoorLock
            }
            this.query = QueryVehicleStatusRequest().apply {
                this.entity = VehicleEntity.CarLight
            }
            this.unsubscribe = UnsubscribeVehicleStatusRequest().apply {
                this.entity = VehicleEntity.Engine
            }
            this.signature = ubyteArrayOf(
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            )
        }
        assertEquals(response.keyId.deviceOemId.toInt(), 0x0201)
        assertEquals(response.keyId.vehicleOemId.toInt(), 0x0403)
        assertArrayEquals(
            response.keyId.keySerialId.toByteArray(),
            ubyteArrayOf(
                0x10u, 0x0Fu, 0x0Eu, 0x0Du, 0x0Cu, 0x0Bu, 0x0Au, 0x09u, 0x08u, 0x07u, 0x06u, 0x05u
            ).toByteArray()
        )
        assertNotNull(response.rke)
        assertEquals(response.rke?.rke, RkeFunctionAndAction.DoorLock)
        assertNotNull(response.subscribe)
        assertEquals(response.subscribe?.entity, VehicleEntity.DoorLock)
        assertNotNull(response.query)
        assertEquals(response.query?.entity, VehicleEntity.CarLight)
        assertNotNull(response.unsubscribe)
        assertEquals(response.unsubscribe?.entity, VehicleEntity.Engine)
        assertArrayEquals(
            response.signature.toByteArray(),
            ubyteArrayOf(
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            ).toByteArray()
        )
    }
    @Test
    fun serialize_auth_response() {
        val response = AuthResponse().apply {
            this.keyId = KeyId().apply {
                this.deviceOemId = 0x0102u
                this.vehicleOemId = 0x0304u
                this.keySerialId = ubyteArrayOf(0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u)
            }
            this.rke = null
            this.subscribe = null
            this.query = null
            this.unsubscribe = null
            this.signature = ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            )
        }
        var serializedResponse = response.serialize()
        assertArrayEquals(
            serializedResponse.toByteArray(),
            ubyteArrayOf(
                0x7Fu, 0x2Du,
                0x54u,
                0x5Du, 0x10u,
                0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u,
                0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u,
                0x9Eu, 0x40u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            ).toByteArray()
        )

        response.apply {
            this.rke = RkeRequest().apply {
                this.rke = RkeFunctionAndAction.DoorLock
            }
            this.subscribe = SubscribeVehicleStatusRequest().apply {
                this.entity = VehicleEntity.DoorLock
            }
            this.query = QueryVehicleStatusRequest().apply {
                this.entity = VehicleEntity.CarLight
            }
            this.unsubscribe = UnsubscribeVehicleStatusRequest().apply {
                this.entity = VehicleEntity.Engine
            }
        }
        serializedResponse = response.serialize()
        assertArrayEquals(
            serializedResponse.toByteArray(),
            ubyteArrayOf(
                0x7Fu, 0x2Du,
                0x79u,
                0x5Du, 0x10u,
                0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u,
                0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u,
                0x7Fu, 0x70u,
                0x07u,
                0x80u, 0x02u,
                0x00u, 0x01u,
                0x81u, 0x01u,
                0x01u,
                0x7Fu, 0x73u,
                0x06u,
                0x30u, 0x04u,
                0x84u, 0x02u,
                0x00u, 0x01u,
                0x7Fu, 0x74u,
                0x06u,
                0x30u, 0x04u,
                0x84u, 0x02u,
                0x00u, 0x06u,
                0x7Fu, 0x75u,
                0x06u,
                0x30u, 0x04u,
                0x84u, 0x02u,
                0x00u, 0x04u,
                0x9Eu, 0x40u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            ).toByteArray()
        )
    }
    @Test
    fun deserialize_auth_response() {
        var buffer: UByteArray = ubyteArrayOf(
            0x7Fu, 0x2Du,
            0x54u,
            0x5Du, 0x10u,
            0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u,
            0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u,
            0x9Eu, 0x40u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
        )
        var response = AuthResponse().apply {
            this.deserialize(buffer)
        }
        assertEquals(response.keyId.deviceOemId.toInt(), 0x0102)
        assertEquals(response.keyId.vehicleOemId.toInt(), 0x0304)
        assertArrayEquals(
            response.keyId.keySerialId.toByteArray(),
            ubyteArrayOf(
                0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u
            ).toByteArray()
        )
        assertNull(response.rke)
        assertNull(response.subscribe)
        assertNull(response.query)
        assertNull(response.unsubscribe)
        assertArrayEquals(
            response.signature.toByteArray(),
            ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            ).toByteArray()
        )

        buffer = ubyteArrayOf(
            0x7Fu, 0x2Du,
            0x79u,
            0x5Du, 0x10u,
            0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u,
            0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u,
            0x7Fu, 0x70u,
            0x07u,
            0x80u, 0x02u,
            0x00u, 0x01u,
            0x81u, 0x01u,
            0x01u,
            0x7Fu, 0x73u,
            0x06u,
            0x30u, 0x04u,
            0x84u, 0x02u,
            0x00u, 0x01u,
            0x7Fu, 0x74u,
            0x06u,
            0x30u, 0x04u,
            0x84u, 0x02u,
            0x00u, 0x06u,
            0x7Fu, 0x75u,
            0x06u,
            0x30u, 0x04u,
            0x84u, 0x02u,
            0x00u, 0x04u,
            0x9Eu, 0x40u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
        )
        response = AuthResponse().apply {
            this.deserialize(buffer)
        }
        assertEquals(response.keyId.deviceOemId.toInt(), 0x0102)
        assertEquals(response.keyId.vehicleOemId.toInt(), 0x0304)
        assertArrayEquals(
            response.keyId.keySerialId.toByteArray(),
            ubyteArrayOf(
                0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0x10u
            ).toByteArray()
        )
        assertNotNull(response.rke)
        assertEquals(response.rke!!.rke, RkeFunctionAndAction.DoorLock)
        assertNotNull(response.subscribe)
        assertEquals(response.subscribe!!.entity, VehicleEntity.DoorLock)
        assertNotNull(response.query)
        assertEquals(response.query!!.entity, VehicleEntity.CarLight)
        assertNotNull(response.unsubscribe)
        assertEquals(response.unsubscribe!!.entity, VehicleEntity.Engine)
        assertArrayEquals(
            response.signature.toByteArray(),
            ubyteArrayOf(
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
                0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u, 0x02u,
            ).toByteArray()
        )
    }
}